{"version":3,"file":"static/webpack/static/development/pages/index.js.5533b06fe4cafaafd786.hot-update.js","sources":["webpack:///./pages/index.jsx"],"sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport * as R from 'ramda'\n// API\nimport api from '../api'\n\n// Components\nimport MainLayout from '../layouts/MainLayout'\nimport Product from '../components/index/Product'\nimport FiltersBar from '../components/index/FiltersBar'\n\n// State\nimport ProductContext from '../state/product/context'\nimport UserContext from '../state/user/context'\n\nconst IndexPage = ({ products, userData }) => {\n  const [isDescending, setIsDescending] = useState(true)\n  const [isHighest, setIsHighest] = useState(false)\n\n  const productContext = useContext(ProductContext)\n  const userContext = useContext(UserContext)\n\n  useEffect(() => {\n    productContext.updateProductList(products)\n    userContext.updateUserData(userData)\n  }, [])\n\n  const filterOptions = () => {\n    return productContext.productState.products.reduce((acc, product) => {\n      if (acc.indexOf(product.category) === -1) {\n        acc.push(product.category)\n      }\n      return acc\n    }, [])\n  }\n\n  const productsToShow = (productContext) => {\n    R.pipe(\n      R.filter((product) => product.name.toLowerCase().includes(criteria)),\n      R.ifElse(\n        () => isDescending,\n        R.sort(R.descend(R.prop(''))),\n        R.sort(R.ascend(R.prop('')))\n      ),\n      R.ifElse(\n        () => isHighest,\n        R.sort(R.descend(R.prop(''))),\n        R.sort(R.ascend(R.prop('')))\n      )\n    )(productContext.productState.products)\n  }\n\n  return (\n    <>\n      <MainLayout>\n        <FiltersBar\n          filterOptions={filterOptions()}\n          setIsDescending={setIsDescending}\n          setIsHighest={setIsHighest}\n          isDescending={isDescending}\n          isHighest={isHighest}\n        />\n        <ProductsContainer>\n          {productContext.productState.products &&\n            productsToShow().map((product) => (\n              <Product\n                key={product._id}\n                product={product}\n                userData={userContext.userState.data}\n              />\n            ))}\n        </ProductsContainer>\n      </MainLayout>\n    </>\n  )\n}\n\nconst ProductsContainer = styled.div`\n  grid-column: 2 / -2;\n  display: grid;\n  grid-template: auto / repeat(auto-fill, minmax(260px, 1fr));\n  grid-gap: 24px;\n`\n\nIndexPage.getInitialProps = async () => {\n  let products = []\n  let userData = {}\n  try {\n    const userDataRes = await api.user.getData()\n    userData = userDataRes.data\n\n    const productsRes = await api.product.getAllProducts()\n    products = productsRes.data\n  } catch (err) {\n    console.error(err)\n  }\n  return { products, userData }\n}\n\nexport default IndexPage\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AAAA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAYA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;A","sourceRoot":""}